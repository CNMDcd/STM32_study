#include "stm32f4xx.h"
#include "stdio.h"
#include "led.h"
#include "delay.h"
#include "pwm.h"
#include "sr04.h"
#include "printf.h"
#include "usart.h"
#include "bluetooth.h"
#include "OLED_I2C.h"
#include "SG90.h"
#include "iic.h"
//#include "tim.h"

#include "FreeRTOS.h"
#include "task.h"


/*
项目：智能小车

PWM  占空比
	PD14  	FSMC_D0  	TIM4_CH3
	PD15  	FSMC_D1  	TIM4_CH4
	
	PE13  	FSMC_D10 	TIM1_CH3
	PE14  	FSMC_D11 	TIM1_CH4

	PC6   	DCMI0    	TIM8_CH1
	PC7   	DCMI1    	TIM8_CH2
	PC8   	DCMI2    	TIM8_CH3
	PC9   	DCMI3    	TIM8_CH4

	TIM_SetCompare1(TIM8,0);		//QIAN
	TIM_SetCompare2(TIM8,0);
	TIM_SetCompare3(TIM8,0);		//QIAN
	TIM_SetCompare4(TIM8,0);

	TIM_SetCompare3(TIM4,0);		//QIAN
	TIM_SetCompare4(TIM4,0);

	TIM_SetCompare3(TIM1,0);
	TIM_SetCompare4(TIM1,0);		//QIAN

蓝牙  USART3
	PB10  	USART3_TX
	PB11  	USART3_RX

超声波测距
	PE5 做为普通输出TRIG（触发信号）	DCMI_D6
	PE6 做为普通输入ECHO（回响信号）	DCMI_D7


OLED
	PB15  	LCD_BL      SCK
	PD10  	FSMC_D15    SDA

舵机SG90
	PE9		FSMC_D6 	TIM1_CH1

语音识别ASR01


*/
//粗延时
void delay(int n)
{
	int i, j;
	for(i=0; i<n; i++)
		for(j=0; j<30000; j++);
}




/***  蓝牙(bluetooth)  ***/
u8 g_flag = 0;  			// 判定是否接收完数据
u8 g_buffer[32] = {0};    	// 接收数据
u8 g_rxbuffer[32] = {0};  	// 读取数据
u8 rx_i;					// 判定变量
u8 g_count = 0; 			// 接收数据长度

/*** 车辆状态标识 	***/
u8 catPd = 0;				// 0 停止， 1 行驶
u8 catPdto = 0;				// 0 手动模式， 1 自动避障模式
u8 catPdtou = 0;			// 0 向前, 		1 向后
u16 catSum = 500;			// 行驶速度
u16 catSumMax = 40;			// 设定安全距离
int catSumto = 0;			// 实时测距

void USART1_IRQHandler(void)
{ 
	if(USART_GetITStatus(USART1, USART_IT_RXNE) == SET)
	{
		USART_ClearITPendingBit(USART1, USART_IT_RXNE); 
		
		g_buffer[g_count++] = USART_ReceiveData(USART1); 
		
		//printf("g_count:%d\r\n",g_count);
		if(g_buffer[g_count - 1] == ':')
		{ 
			for(rx_i=0; rx_i < g_count - 1; rx_i++)
			{ 
				g_rxbuffer[rx_i] = g_buffer[rx_i];
			}
			 
			memset(g_buffer, 0, sizeof(g_buffer));
			
			g_flag = 2; 
			 
			g_count = 0;
	
		} 
	}	 
}

void USART3_IRQHandler(void)
{ 
	if(USART_GetITStatus(USART3, USART_IT_RXNE) == SET)
	{
		USART_ClearITPendingBit(USART3, USART_IT_RXNE); 
		
		g_buffer[g_count++] = USART_ReceiveData(USART3);   
		if(g_buffer[g_count-1] == ':')
		{ 
			for(rx_i=0; rx_i < g_count - 1; rx_i++)
			{ 
				g_rxbuffer[rx_i] = g_buffer[rx_i];
			}
			 
			memset(g_buffer, 0, sizeof(g_buffer)); 
			
			g_flag = 1; 
			 
			g_count = 0;
	
		} 
	}	 
}

/* 任务1  初始化 */ 
static TaskHandle_t app_init_handle = NULL;
static void app_init(void* pvParameters);  


/* 任务2  OLED */
static TaskHandle_t app_OLED_handle = NULL;
static void app_OLED(void* pvParameters);  

/* 任务2  LED */
static TaskHandle_t app_LED_handle = NULL;
static void app_LED(void* pvParameters);  

/* 任务3  BLUE*/ 
static TaskHandle_t app_BLUE_handle = NULL;
static void app_BLUE(void* pvParameters);  

int main(void)
{
 

	/* 创建app_blue任务 */
	xTaskCreate((TaskFunction_t )app_init,  		/* 任务入口函数 */
			  (const char*    )"app_init",			/* 任务名字 */
			  (uint16_t       )256,  				/* 任务栈大小 */
			  (void*          )NULL,				/* 任务入口函数参数 */
			  (UBaseType_t    )2, 					/* 任务的优先级 */
			  (TaskHandle_t*  )&app_init_handle);	/* 任务控制块指针 */ 

 
//	/* 开启任务调度 */
	vTaskStartScheduler(); 
 
}

static void app_init(void* pvParameters)
{ 	
	Led_Init();
 	Pwm_one_Init();
 	Usart1_Init(115200);
 	Bluetooth_Init();
 	Sr04_Init();
 	I2C_Configuration();
 	sg90_Init();
	Iic_Init();
 	sg90_up(90); 

 	OLED_Init();
 	OLED_CLS(); 

	//创建用户任务1
	xTaskCreate(app_OLED, "OLED", 128, NULL, 3, &app_OLED_handle);
	xTaskCreate(app_LED, "LED", 128, NULL, 3, &app_LED_handle);
	xTaskCreate(app_BLUE, "BLUE", 128, NULL, 3, &app_BLUE_handle);
	
	
	for(;;)
	{
	 

		GPIO_ToggleBits(GPIOF, GPIO_Pin_10); 
		printf("hello111\r\n");
		delay_s(1);

	}
}  

// 蓝牙指令处理
static void app_BLUE(void* pvParameters)
{
	for(;;)
	{
		
		if(g_flag == 1)
		{
			printf("helloBLUE\r\n");
			if(strncmp(g_rxbuffer,"tou",3) == 0)
			{
				if(catPdto == 0)
				{
					char *p = strtok(g_rxbuffer,"-");
					printf("调整1：%s\r\n",p);
					if(p != NULL)
						p = strtok(NULL,"-");
					printf("调整2：%s\r\n",p);
					int sum = atoi(p);
					printf("调整3：%d\r\n",sum);
					sg90_up(sum);
				}
			}
			if(strncmp(g_rxbuffer,"SYSTEM",6) == 0)
			{
				if(catPdto == 0)
				{
					char *p = strtok(g_rxbuffer,"/");
					printf("调整1：%s\r\n",p);
					if(p != NULL)
						p = strtok(NULL,"-");
					printf("调整2：%s\r\n",p);
					int sum = atoi(p);
					printf("调整3：%d\r\n",sum); 
					catSumMax = sum;
					char tmp[8];
					sprintf(tmp,"%d",sum);
					At24c02_Write_Page(0x00, tmp, 8);
				}
			}
			if(strcmp(g_rxbuffer,"STA/STO") == 0)
			{
				printf("调整4：%s\r\n",g_rxbuffer);
				if(catPd == 0)
				{
					catPd = 1;
					catPdtou = 0;
/******************************************************
	TIM_SetCompare3(TIM5,0);		// PA USART2
	TIM_SetCompare4(TIM5,0);
	
	TIM_SetCompare1(TIM3,0);		// PC DCMI
	TIM_SetCompare2(TIM3,0);
	TIM_SetCompare3(TIM3,0);		// PC DCMI
	TIM_SetCompare4(TIM3,0);

	TIM_SetCompare3(TIM4,0);		// PD FSMC
	TIM_SetCompare4(TIM4,0);		
******************************************************/
					TIM_SetCompare1(TIM3,0);	// 左后
					TIM_SetCompare2(TIM3,0);

					TIM_SetCompare3(TIM3,0);	// 左前
					TIM_SetCompare4(TIM3,0);

					TIM_SetCompare3(TIM4,0);	// 右前
					TIM_SetCompare4(TIM4,0);

					TIM_SetCompare3(TIM5,0);	// 右后
					TIM_SetCompare4(TIM5,800);
				}
				else
				{
					catPd = 0;
					TIM_SetCompare1(TIM1,0);	// 左后
					TIM_SetCompare2(TIM1,0);

					TIM_SetCompare3(TIM8,0);	// 左前
					TIM_SetCompare4(TIM8,0);

					TIM_SetCompare3(TIM4,0);	// 右前
					TIM_SetCompare4(TIM4,0);

					TIM_SetCompare3(TIM5,0);	// 右后
					TIM_SetCompare4(TIM5,0);
				}
				
			} 
			if(strcmp(g_rxbuffer,"VANCE") == 0)
			{	// 前进
				if(catPdtou == 0)
				{
					catSum += 99;
					if(catPd == 1 && catPdto == 0)
					{
						TIM_SetCompare1(TIM8,catSum);
						TIM_SetCompare2(TIM8,0);
						TIM_SetCompare3(TIM8,catSum);
						TIM_SetCompare4(TIM8,0);

						TIM_SetCompare3(TIM4,catSum);
						TIM_SetCompare4(TIM4,0);

						TIM_SetCompare3(TIM1,catSum);
						TIM_SetCompare4(TIM1,0);
					}
				}
				else
				{
					catSum = 500;
					if(catPd == 1 && catPdto == 0)
					{
						TIM_SetCompare1(TIM8,0);
						TIM_SetCompare2(TIM8,catSum);
						TIM_SetCompare3(TIM8,0);
						TIM_SetCompare4(TIM8,catSum);

						TIM_SetCompare3(TIM4,0);
						TIM_SetCompare4(TIM4,catSum);

						TIM_SetCompare3(TIM1,0);
						TIM_SetCompare4(TIM1,catSum);
					}
				}

			}
			if(strcmp(g_rxbuffer,"BACK") == 0)
			{	// 后退
				if(catPdtou == 1)
				{
					catSum += 99;
					if(catPd == 1 && catPdto == 0)
					{
						TIM_SetCompare1(TIM8,0);
						TIM_SetCompare2(TIM8,catSum);
						TIM_SetCompare3(TIM8,0);
						TIM_SetCompare4(TIM8,catSum);

						TIM_SetCompare3(TIM4,0);
						TIM_SetCompare4(TIM4,catSum);

						TIM_SetCompare3(TIM1,0);
						TIM_SetCompare4(TIM1,catSum);
					}
				}
				else
				{
					catSum = 500;
					if(catPd == 1 && catPdto == 0)
					{
						TIM_SetCompare1(TIM8,catSum);
						TIM_SetCompare2(TIM8,0);
						TIM_SetCompare3(TIM8,catSum);
						TIM_SetCompare4(TIM8,0);

						TIM_SetCompare3(TIM4,catSum);
						TIM_SetCompare4(TIM4,0);

						TIM_SetCompare3(TIM1,catSum);
						TIM_SetCompare4(TIM1,0);
					}
				}
			}
			if(strcmp(g_rxbuffer,"LEFT") == 0)
			{	// 左转
				if(catPdtou == 0)
				{
					if(catPd == 1 && catPdto == 0)	// 向前左转
					{
						TIM_SetCompare1(TIM8,catSum - 50);
						TIM_SetCompare2(TIM8,0);
						TIM_SetCompare3(TIM8,catSum - 50);
						TIM_SetCompare4(TIM8,0);

						TIM_SetCompare3(TIM4,catSum + 100);
						TIM_SetCompare4(TIM4,0);

						TIM_SetCompare3(TIM1,catSum + 100);
						TIM_SetCompare4(TIM1,0);
					}
				}
				else
				{
					if(catPd == 1 && catPdto == 0)	// 向后左转
					{
						TIM_SetCompare1(TIM8,0);
						TIM_SetCompare2(TIM8,catSum - 50);
						TIM_SetCompare3(TIM8,0);
						TIM_SetCompare4(TIM8,catSum - 50);

						TIM_SetCompare3(TIM4,0);
						TIM_SetCompare4(TIM4,catSum + 100);

						TIM_SetCompare3(TIM1,0);
						TIM_SetCompare4(TIM1,catSum + 100);
					}
				}

			}
			if(strcmp(g_rxbuffer,"RIGHT") == 0)
			{	// 右转
				if(catPdtou == 0)
				{
					if(catPd == 1 && catPdto == 0)	// 向前右转
					{
						TIM_SetCompare1(TIM8,catSum + 100);
						TIM_SetCompare2(TIM8,0);
						TIM_SetCompare3(TIM8,catSum + 100);
						TIM_SetCompare4(TIM8,0);

						TIM_SetCompare3(TIM4,catSum - 50);
						TIM_SetCompare4(TIM4,0);

						TIM_SetCompare3(TIM1,catSum - 50);
						TIM_SetCompare4(TIM1,0);
					}
				}
				else
				{
					if(catPd == 1 && catPdto == 0)
					{
						TIM_SetCompare1(TIM8,0);
						TIM_SetCompare2(TIM8,catSum + 100);
						TIM_SetCompare3(TIM8,0);
						TIM_SetCompare4(TIM8,catSum + 100);

						TIM_SetCompare3(TIM4,0);
						TIM_SetCompare4(TIM4,catSum - 50);

						TIM_SetCompare3(TIM1,0);
						TIM_SetCompare4(TIM1,catSum - 50);
					}
				}

			}
			if(strcmp(g_rxbuffer,"LEFTSS") == 0)
			{	// 左滑
				if(catPd == 1 && catPdto == 0)
				{
					TIM_SetCompare1(TIM8,catSum + 100);
					TIM_SetCompare2(TIM8,0);
					TIM_SetCompare3(TIM8,0);
					TIM_SetCompare4(TIM8,catSum + 100);

					TIM_SetCompare3(TIM4,catSum - 50);
					TIM_SetCompare4(TIM4, 0);

					TIM_SetCompare3(TIM1,0);
					TIM_SetCompare4(TIM1,catSum - 50);

				}
			}
			if(strcmp(g_rxbuffer,"GIGHTSS") == 0)
			{	// 右滑
				if(catPd == 1 && catPdto == 0)
				{					
					TIM_SetCompare1(TIM8,0);
					TIM_SetCompare2(TIM8,catSum + 100);
					TIM_SetCompare3(TIM8,catSum + 100);
					TIM_SetCompare4(TIM8,0);

					TIM_SetCompare3(TIM4,0);
					TIM_SetCompare4(TIM4,catSum - 50);

					TIM_SetCompare3(TIM1,catSum - 50);
					TIM_SetCompare4(TIM1,0);
				}
			}
			if(strcmp(g_rxbuffer,"MY/AI") == 0)
			{	// 切换驾驶模式
				if(catPdto == 0)
				{
					catPdto = 1;
				}
				else
				{
					catPdto = 0;
				}
			}
			if(catPdto == 1)
			{	// 自动避障模式
				if(catSumto < catSumMax)
				{

				}
			}


			printf("g_rx:%s\r\n",g_rxbuffer);
			g_flag = 0;
			memset(g_rxbuffer, 0, sizeof(g_rxbuffer));
		} 
		
	}
}  


// OLED显示
static void app_OLED(void* pvParameters)
{

	printf("hello222\r\n");	
	int cont = 0;
	int sont = 0;
	
	for(;;)
	{
		OLED_Fill(0x00);
		//delay_ms(10);
		catSumto = Get_Sr04_Value();			// 实时测距
		delay_ms(30);
		char add[20];
		if(catSumto <= 0)
		{
			sprintf(add,":error CM"); 
		}
		else
		{
			sprintf(add,":%d CM",catSumto); 
		}
		 

		OLED_ShowCN(0,0,8);
		OLED_ShowCN(16,0,9);
		OLED_ShowCN(32,0,10);
		OLED_ShowCN(48,0,11);
		OLED_ShowStr(64,0,add,2);

		char add1[20];
		sprintf(add1,":%dCM",catSumMax); 
		OLED_ShowCN(0,2,12);
		OLED_ShowCN(16,2,13);
		OLED_ShowCN(32,2,11);
		OLED_ShowCN(48,2,14);
		OLED_ShowStr(64,2,add1,2);

		char read_buff[24];
		At24c02_Read_Data(0x00, read_buff, 8);
		OLED_ShowStr(0,4,read_buff,2);
		catSumMax = atoi(read_buff);
		printf("read_buff:%s\r\n",read_buff);

		delay_s(1);

	}
}  

/* LED 调试 */
static void app_LED(void* pvParameters)
{
 
	printf("hello333\r\n");	
	int cont = 0;
	int sont = 0;
	for(;;)
	{ 
		GPIO_ToggleBits(GPIOF, GPIO_Pin_9);
		delay_s(1);		
 
	}
}  

